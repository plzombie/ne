<html lang=es><head><meta http-equiv=Content-Type content="text/html; charset=windows-1251"><title>uFMOD</title></head><body style='margin:0'><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#E7E7E7 align=center><td height=20 style='color:#708090;font-size:9pt;font-family:Arial,Aerial'>[ <a href='en.htm'>English</a> | Espa&#241;ol | <a href='ru.htm'>Pycc&#954;u&#250;</a> ]<tr bgcolor=#708090><td height=1></table><center><h2 style='font-size:14pt;font-family:Arial,Aerial'>&#956;FMOD v1.25.2 para Win32</h2></center><div style='font-size:10pt;font-family:Arial,Aerial;text-align:justify;margin:8'><p>uFMOD es una librer&#237;a para reproducir m&#250;sica en formato XM, desarrollada completamente en lenguaje ensamblador. Es perfecta para aplicaciones de tama&#241;o y tiempo cr&#237;tico, libre de defectos audibles, altamente confiable, f&#225;cil de usar, de c&#243;digo fuente abierto y multiplataforma. Permite reproducir ficheros, recursos y arreglos est&#225;ticos en memoria. Es capaz de reproducir inclusive ficheros corruptos y/o modificados. Ejemplos de uso disponibles para muchos de los siguientes compiladores: Visual C++, C#, Visual Basic, PureBasic, FreeBASIC, BlitzMax, Emergence BASIC, Delphi, Borland C++ Builder, Dev-C++ (MingW), FreePascal, MASM32, FASM, NASM y TASM.<p><ul><li><a href='#1'>&#191;WINMM, DirectSound u OpenAL?</a><li><a href='#2'>Herramientas</a><ul><li><a href='#21'>XMStrip</a><li><a href='#22'>Eff</a></ul><li><a href='#3'>Compilando la librer&#237;a</a><li><a href='#4'>Ejemplos</a><li><a href='#5'>C&#243;mo lograr un ejecutable m&#225;s compacto</a><li><a href='#6'>Preguntas frecuentes</a><li><a href='#7'>Agradecimientos</a></ul><p>&nbsp;<br><a name='1'><b>&#191;WINMM, DirectSound u OpenAL?</b></a><p>uFMOD para Win32 soporta WINMM, DirectX&#174; DirectSound y <a href='http://www.openal.org/'>OpenAL</a>. Los tres tienen pros y contras. DirectSound ofrece efectos de sonido avanzados, administra autom&#225;ticamente el mezclado de multiples canales y hasta permite generar ambientaci&#243;n en 3D. Tambi&#233;n es considerado ser mas confiable que WINMM. En cambio, WINMM es soportado hasta en los PC mas "viejitos" con Windows 95. OpenAL es multiplataforma (disponible en Windows, Linux, Macintosh, <a href='http://www.openal.org/platforms.html'>etc</a>.), soporta efectos de ambientaci&#243;n acelerados en hardware, lo cual es muy &#250;til en el desarrollo de juegos. Sin embargo, OpenAL no viene preinstalado en Windows XP y anteriores, excepto en algunos equipos OEM con tarjetas de sonido Creative de gama alta. Siendo as&#237;, es probable que Ud. tenga que descargar e instalar OpenAL, si desea usar este sistema en el desarrollo de sus aplicaciones. Dependiendo del hardware y los controladores, WINMM a veces puede sonar mejor que DirectSound y viceversa. De todas formas, las diferencias generalmente no son notorias para la mayoria de los usuarios. Si no est&#225; seguro de cual escoger, es probable que la versi&#243;n cl&#225;sica de uFMOD para WINMM corresponda mejor con sus necesidades. Por lo menos, es mas f&#225;cil de usar: tan s&#243;lo un par de lineas de c&#243;digo hacen que su aplicaci&#243;n comience a reproducir audio.<p>&nbsp;<br><a name='2'><b>Herramientas</b></a><p>Hay 2 herramientas gratuitas para usar con uFMOD: XMStrip y Eff. Ambas ofrecen una interfaz dual: consola y gr&#225;fica (GUI). Cuando se ejecutan con parametros de linea de comandos, se activa el modo de consola. El modo GUI es bastante intuitivo. Vamos a exponer el modo de consola.<p><table border=0 cellpadding=0 cellspacing=0 bgcolor=#708090 style='font-size:9pt;font-family:Arial,Aerial'><tr><td colspan=3 height=1><tr height=18><td style='color:#E7E7E7'><b>&nbsp;SVN&nbsp;</b><td bgcolor=#E7E7E7>&nbsp;<a href='http://ufmod.svn.sourceforge.net/viewvc/ufmod/Win32'>C&#243;digo fuente completo disponible</a>&nbsp;<td width=1><tr><td colspan=3 height=1></table><p><a name='21'><b><i>XMStrip</i></b></a> recibe un fichero XM como entrada, modifica su contenido para minimizar el tama&#241;o, sin que esto afecte la calidad del sonido. Concretamente, XMStrip elimina los datos no utilizados (instrumentos y patrones redundantes, comentarios, etc.) y agrupa los patrones de notas para optimizar el tiempo de lectura y procesamiento del XM. Al ingresar <code>xmstrip /h</code> obtenemos la siguiente respuesta:<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#008000> uFMOD XMSTRIP</font><font color=#FFFFFF>
 USAGE:  xmstrip [options] file [output]
         file   - input file name, which can
                  contain wildcards (* and ?)         
                  for batch processing.
         output - optional output file name
 options:
  /c - clean only (don't strip)
 When [output] is not specified, XMSTRIP
 attempts to overwrite the input. If file
 name contains spaces, enclose it in "".</font></table></center><p>Si no especifica el nombre del fichero de salida, XMStrip intentar&#225; sobreescribir el fichero de entrada. Si el nombre del fichero contiene espacios, enci&#233;rrelo entre comillas dobles (""). XMStrip admite el uso de comodines (* y ?) para procesamiento por lotes.<p>Tenga presente, que otros reproductores de XM, probablemente, rechacen los ficheros producidos por XMStrip. Especifique <b>/c</b> para 'recuperar' un fichero as&#237; o s&#237;mplemente para procesar un fichero normal que desea poder usar en otros reproductores de XM.<p><a name='22'><b><i>Eff</i></b></a> es &#250;til para los usuarios avanzados, que desean ahorrar hasta el &#250;ltimo byte en sus aplicaciones. La idea es extraer s&#243;lo aquellas opciones que realmente se van a usar en la aplicaci&#243;n, recompilar la librer&#237;a uFMOD y obtener el menor tama&#241;o posible. Comencemos abriendo la consola y escribiendo <code>eff /h</code> para obtener el siguiente res&#250;men:<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#008000> uFMOD XM effects extractor</font><font color=#FFFFFF>
 USAGE:  eff file [options]
         file - input file name
         options:
          /Dm - generate a masm32/tasm dump
          /Dd - generate a Pascal (Delphi) dump
          /Dc - generate a C/C++ dump
          /Ds - generate an RCDATA resource dump
          /Di - disable infoAPI:
                    uFMOD_GetStats, uFMOD_GetRowOrder,
                    uFMOD_GetTitle and uFMOD_GetTime
          /Dp - disable uFMOD_Pause, uFMOD_Resume
                    and XM_SUSPENDED
          /Dv - disable volume control
          /Dj - disable Jump2Pattern
          /Df - disable loading XM from file
          /Dr - disable loading XM from resource
          /Dl - disable XM_NOLOOP
          /M  - mark & clear unused chunks of
                data in a masm32/tasm compatible dump</font></table></center><p>Como puede ver, el &#250;ltimo par&#225;metro es el nombre del fichero XM que se va a usar con la aplicaci&#243;n. Opciones adicionales:<ul><li><b>/Dm</b> genera un volcado hexadecimal a partir del fichero XM dado, para ser usado en MASM32 o TASM. Tanto los ejemplos de MASM32 incluidos con uFMOD, como los de TASM, utilizan este tipo de volcados en vez de recursos para ahorrar unos cuantos bytes.<li><b>/Dd</b> y <b>/Dc</b> generan volcados para Pascal (Delphi, Kylix, FreePascal) y C/C++ respectivamente.<li><b>/Ds</b> produce un volcado en formato RCDATA, usado en scripts de recursos. Algunos compiladores de recursos no soportan la sintaxis habitual de Microsoft: <code>id RCDATA "nombre_de_fichero"</code>. El volcado RCDATA se debe usar para compatibilidad con versiones viejas del compilador de recursos GNU, como el que viene con Dev-C++.<li>Especifique <b>/Di</b> para deshabilitar todas las funciones informativas: uFMOD_GetStats, uFMOD_GetRowOrder, uFMOD_GetTitle y uFMOD_GetTime. Eliminarlas reduce el tama&#241;o de la librer&#237;a y mejora un poco el rendimiento.<li><b>/Dp</b> elimina las funciones uFMOD_Pause y uFMOD_Resume y hace que uFMOD ignore la bandera XM_SUSPENDED. Si no necesita pausar/reanudar, agregue esta opci&#243;n a la linea de comandos para ahorrar otros tantos bytes.<li>uFMOD_SetVolume no s&#243;lo hace la librer&#237;a m&#225;s grande, sino que tambi&#233;n consume tiempo adicional de CPU. Utilice <b>/Dv</b> para deshabilitar esta funci&#243;n y recuperar algunos bytes y tics ;)<li><b>/Dj</b> deshabilita la funci&#243;n Jump2Pattern. Esta es una funci&#243;n avanzada, no usada en la mayoria de las aplicaciones. Consulte la secci&#243;n <a href='#5'>"C&#243;mo lograr un ejecutable m&#225;s compacto"</a> para mayor informaci&#243;n sobre el uso de Jump2Pattern.<li>&#191;No va a reproducir ficheros y/o recursos? - &#161;Los gur&#250; de la optimizaci&#243;n prefieren usar volcados en vez de recursos! Entonces, querr&#225; aprovechar las opciones <b>/Df</b> y <b>/Dr</b> para minimizar el tama&#241;o de la librer&#237;a.<li><b>/Dl</b> (L min&#250;scula) hace que la librer&#237;a ignore la bandera XM_NOLOOP (esto tambi&#233;n reduce el tama&#241;o y mejora la eficiencia).<li>Por &#250;ltimo, hay una opci&#243;n de optimizaci&#243;n realmente extrema, disponible s&#243;lo para MASM32/TASM. En cada fichero XM hay secuencias de bytes que se encuentran reservadas para versiones futuras del formato XM o contienen metadatos (comentarios, publicidad, etc.) <b>/M</b> delimita y resalta estos 'huecos' en el volcado y los habilita para ser usados con mayor utilidad. Por ejemplo, puede almacenar datos y hasta c&#243;digo ejecutable en dichos 'huecos'. El ejemplo Masm32\winmm\ utiliza esta opci&#243;n.</ul>Si no se presenta error alguno, Eff debe generar un fichero EFF.INC y un volcado hexadecimal, si &#233;ste fue solicitado. Algunos ejemplos (todos son correctos):<p><b>eff /Dmpvjfrl /M ejemplo.xm<br>eff /M /Dm /Dp /Dv /Dj /Df /Dr /Dl ejemplo.xm<br>eff -M -Dmpvjfrl ejemplo.xm</b><p>Cualquiera de estas sentencias produce un volcado para MASM32/TASM con todos los 'huecos' delimitados y rellenos con ceros por defecto. El fichero de cabecera EFF.INC recopila los efectos XM que realmente se utilizan en el fichero XM dado, m&#225;s algunas banderas adicionales para deshabilitar las funciones de pausar/reanudar, control de volumen, Jump2Pattern, soporte para ficheros y recursos y XM_NOLOOP. Copie EFF.INC en ufmodlib\src\ y recompile la librer&#237;a. Consulte la siguiente secci&#243;n para mayor informaci&#243;n sobre c&#243;mo recompilar uFMOD. Acaba de compilar su propia versi&#243;n ultraoptimizada de uFMOD, pero recuerde que &#233;sta contiene un subconjunto de efectos XM. Entonces, &#161;s&#243;lo servir&#225; para reproducir correctamente el fichero XM especificado como par&#225;metro!<p>&nbsp;<br><a name='3'><b>Compilando la librer&#237;a</b></a><p>Es necesario volver a compilar la librer&#237;a luego de usar <a href='#22'>Eff</a> y para habilitar ciertas funciones especiales (ver tabla <b>Opciones</b> mas adelante). Algunas personas querr&#225;n modificar el c&#243;digo fuente de la librer&#237;a, para poner a prueba sus conocimientos en lenguaje ensamblador o por cualquier otra raz&#243;n. Bueno, la siguiente informaci&#243;n les podr&#225; servir.<p>El c&#243;digo fuente completo se encuentra en la subcarpeta ufmodlib\src\:<ul><li><span style='color:#800080'><b>eff.inc</b></span> es un fichero de cabecera. La herramienta <a href='#22'>Eff</a> genera este fichero. No se recomienda modificarlo directamente.<li><span style='color:#800080'><b>equs.inc</b></span> contiene la mayor parte de las definiciones de estructuras y constantes de uso interno.<li><span style='color:#008080'><b>core.asm</b></span> contiene la mayor parte del c&#243;digo fuente de uFMOD. Exactamente el mismo fichero aparece en los paquetes de Win32, Linux, Unix/BSD y KolibriOS. Cargar un fichero XM, mezclar los canales de audio, procesar los efectos XM y otras tareas comunes se encuentran implementadas en este fichero.<li><span style='color:#008080'><b>ufmod.asm</b></span> contiene todo el c&#243;digo dependiente del sistema operativo: lectura de ficheros y recursos, manejo de hilos, etc. El contenido de este fichero var&#237;a en Win32, Linux, Unix/BSD y KolibriOS.<li><span style='color:#008080'><b>fasm.asm</b></span> define las estructuras de datos, constantes y dem&#225;s, usando la sintaxis de Flat Assembler (FASM). Este fichero permite compilar uFMOD con FASM.<li><span style='color:#008080'><b>masm.asm</b></span> define las estructuras de datos, constantes y dem&#225;s, usando la sintaxis de MASM32/TASM. Este fichero permite compilar uFMOD con MASM32 o TASM.<li><span style='color:#008080'><b>nasm.asm</b></span> define las estructuras de datos, constantes y dem&#225;s, usando la sintaxis de Netwide Assembler (NASM). Este fichero permite compilar uFMOD con NASM.<li><span style='color:#000080'><b>ufmod.desc</b></span>, <span style='color:#000080'><b>oalufmod.desc</b></span> y <span style='color:#000080'><b>dsufmod.desc</b></span> son ficheros de descripci&#243;n de librer&#237;a para PureBasic. El PureBasic Library SDK requiere de estos ficheros para poder generar las librer&#237;as uFMOD en formato PureLibrary.<li><b>ufmod.def</b>, <b>oalufmod.def</b> y <b>dsufmod.def</b> son ficheros de definici&#243;n de librer&#237;a para compilar uFMOD en modo DLL.</ul>ufmodlib\import\ contiene el c&#243;digo fuente usado para compilar todas las librer&#237;as de importaci&#243;n que se usan conjuntamente con uFMOD. Algunas de estas se usan para generar las librer&#237;as uFMOD para Visual Basic 6 y FreePascal. Dichas librer&#237;as de importaci&#243;n se encuentran precompiladas en la subcarpeta ufmodlib\lib\. Las librer&#237;as de importaci&#243;n para DirectSound y OpenAL para diferentes compiladores tambi&#233;n se encuentran aqu&#237;. Todas estas librer&#237;as se pueden recompilar con el <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>. ufmodlib\import\<b>buildall.bat</b> es un fichero de procesamiento por lotes. Sirve para recompilar todas las librer&#237;as anteriormente mencionadas.<p>Hay una herramienta adicional en ufmodlib\bin\. Esta se utiliza para hacer un c&#243;digo objeto en formato OMF compatible con Delphi. No es tan sofisticada como OMF2D de EliCZ, pero tiene la capacidad necesaria para lograr una versi&#243;n de la librer&#237;a uFMOD para Delphi. Cuando se compila uFMOD en formato OMF con NASM, <b>o4delphi</b> entra en acci&#243;n. <p><table border=0 cellpadding=0 cellspacing=0 bgcolor=#708090 style='font-size:9pt;font-family:Arial,Aerial'><tr><td colspan=3 height=1><tr height=18><td style='color:#E7E7E7'><b>&nbsp;SVN&nbsp;</b><td bgcolor=#E7E7E7>&nbsp;<a href='http://ufmod.svn.sourceforge.net/viewvc/ufmod/Win32'>C&#243;digo fuente completo disponible</a>&nbsp;<td width=1><tr><td colspan=3 height=1></table><p>Una vez terminada la modificaci&#243;n del c&#243;digo fuente, lo que hace falta es compilarlo. Seleccione uno de los ficheros de procesamiento por lotes (BAT) en ufmodlib\, seg&#250;n el compilador para el cual se desea generar la librer&#237;a. La siguiente tabla le ayudar&#225; a escoger el fichero apropiado:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>BAT<td>Compilador(es) soportado(s)<td>Comentarios<tr valign=top><td>mk_coff<td>Visual C/C++, Dev-C++ (MingW), <a href='http://www.flatassembler.net/'>FASM</a>, <a href='http://nasm.sourceforge.net/'>NASM</a>, MASM32, <a href='http://sourceforge.net/projects/fbc/'>FreeBASIC</a><td>El ensamblador m&#225;s recomendado para generar uFMOD en formato COFF es FASM.<tr bgcolor=#E7E7E7 valign=top><td>mk_omf<td>Borland Delphi, Borland C++ Builder, TASM<td>Los usuarios de Borland C++ Builder y TASM deber&#225;n asignar LIB a la opci&#243;n UF_FMT. Los usuarios de Delphi deber&#225;n asignarle OBJ.<tr><td>mk_vb6<td>Visual Basic 6<td><tr bgcolor=#E7E7E7><td>mk_pbas<td>PureBasic<td><tr><td>mk_bmax<td>BlitzMax<td><tr bgcolor=#E7E7E7><td>mk_fpas<td><a href='http://sourceforge.net/projects/freepascal/'>FreePascal</a><td><tr><td>mk_ebas<td>Emergence BASIC<td><tr bgcolor=#E7E7E7><td colspan=3 height=2></table><p>Abra el fichero de procesamiento por lotes en un editor de texto plano. Todo lo contenido entre las siguientes l&#237;neas:<pre>rem *** CONFIG START</pre>y<pre>rem *** CONFIG END</pre>es configurable. Primero, verifique los valores en la secci&#243;n <code>Pathes</code>. Puede encontrar la siguiente opci&#243;n:<pre>SET UF_MASM=C:\masm32</pre>Si Ud. tiene instalado MASM32, aseg&#250;rese de que el camino all&#237; especificado apunte exactamente a la ubicaci&#243;n de MASM32. Supongamos que MASM32 se encuentra instalado en <code>D:\TOOLS\MASM32</code>. Entonces, vamos a modificar el camino de la siguiente forma:<pre>SET UF_MASM=D:\TOOLS\MASM32</pre>No todos los caminos deben ser configurados correctamente para recompilar las librer&#237;as. Por ejemplo, si Ud. prefiere usar FASM como el ensamblador por defecto, no es necesario configurar el camino de MASM32. Algunos caminos incluyen nombres de fichero. Por ejemplo:<pre>SET UF_ARCH=ar</pre>ar.exe debe estar en una de las carpetas incluidas en la variable de entorno PATH. Si no, es necesario especificar el camino completo. Supongamos que el camino correcto es <code>C:\Archivos de programa\BlitzMax\bin\ar.exe</code>. Entonces, modifiquemos el valor de UF_ARCH:<pre>SET UF_ARCH=C:\Archivos de programa\BlitzMax\bin\ar.exe</pre>Aseg&#250;rese de que los dem&#225;s caminos necesarios para recompilar las librer&#237;as sean correctos. Luego, configure las opciones disponibles, de acuerdo con la siguiente tabla:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Opci&#243;n<sup>*</sup><td>Descripci&#243;n<td width=200>Valores disponibles<sup>*</sup><tr valign=top><td>UF_RAMP<td>Esta opci&#243;n controla el acoplador de vol&#250;men (interpolaci&#243;n). Esto sirve para suprimir cierto tipo de defecto de sonido conocido como clic, com&#250;n en m&#250;sica sintetizada. Sin embargo, la interpolaci&#243;n en algunos casos puede generar distorsi&#243;n. STRONG (fuerte) es el valor por defecto, recomendado para la mayor&#237;a de las aplicaciones. En este modo, el acoplador detecta variaciones de vol&#250;men y las suaviza mediante interpolaci&#243;n lineal de 32 etapas. En modo WEAK (d&#233;bil) hay s&#243;lo 16 etapas. WEAK es menos efectivo que STRONG, pero la probabilidad de distorsi&#243;n tambi&#233;n es menor. NONE deshabilita el acoplador. Si no hay interpolaci&#243;n, no puede haber distorsi&#243;n, pero los clics quedar&#237;an al descubierto, a menos que el contenido del XM se encuentre perfectamente balanceado.<td>NONE, WEAK, STRONG<tr bgcolor=#E7E7E7 valign=top><td>UF_FREQ<td>Frecuencia de muestreo (en Hz). 44100 era el valor por defecto hasta uFMOD v1.20. 48KHz produce mejores resultados en la mayor&#237;a de las tarjetas de sonido y consume menos recursos del sistema. Por eso, 48000 es el nuevo valor por defecto, recomendado para la mayor&#237;a de las aplicaciones. 22050 es para los que a&#250;n sienten nostalgia por los tiempos de Amiga...<td>22050, 44100, 48000<tr valign=top><td>UF_UFS<td>Codificaci&#243;n de texto. Las aplicaciones Unic&#243;digo deben usar el valor UNICODE, excepto en BlitzMax, PureBasic y Visual Basic 6, donde la opci&#243;n UNICODE no es soportada. Recuerde que las aplicaciones Unic&#243;digo corren m&#225;s r&#225;pido sobre NT/XP. Es obligatorio usar UNICODE al compilar uFMOD para .NET.<td>ANSI, UNICODE<tr bgcolor=#E7E7E7 valign=top><td>UF_FMT<td>Indica si los ficheros se deben generar en formato de librer&#237;a est&#225;tica, en formato de c&#243;digo objeto plano o en modo de DLL con librer&#237;as de importaci&#243;n. Por ejemplo, Delphi no soporta ficheros lib, por lo cual se debe usar la opci&#243;n OBJ para compatibilidad con Delphi. C/C++ y todos los ensambladores soportan tanto libs como objs. Algunos compiladores no soportan enlace est&#225;tico. En ese caso la &#250;nica opci&#243;n es DLL, aunque eso le resta elegancia a la aplicaci&#243;n de uFMOD.<td>OBJ, LIB, DLL<tr valign=top><td>UF_ASM<td>Ensamblador. Las librer&#237;as uFMOD se pueden compilar con diferentes ensambladores. Escoja su favorito :)<td>MASM, NASM, FASM, TASM<tr bgcolor=#E7E7E7 valign=top><td>UF_MODE<td>NORMAL es el valor por defecto. No tiene nada de especial. UNSAFE deshabilida la comprobaci&#243;n de validez del formato XM a la hora de cargar el fichero. Si Ud. est&#225; seguro de que todos los ficheros XM est&#225;n correctos (puede verificarlos con Eff o con XMStrip), puede recompilar uFMOD en modo UNSAFE para reducir el tama&#241;o de la librer&#237;a y el tiempo de carga. Tenga en cuenta que &#161;Un XM corrupto podr&#237;a ocasionar un fallo en modo UNSAFE! Al compilar uFMOD en modo BENCHMARK se habilita un indicador de rendimiento, el cual registra el n&#250;mero exacto de ciclos de reloj que cuesta generar poco m&#225;s de 21 ms de audio a 48 KHz. Este modo es &#250;til para comparar el rendimiento de diferentes versiones de uFMOD. Consulte los ejemplos de C y la bandera BENCHMARK para mayor informaci&#243;n. El modo BENCHMARK se encuentra disponible s&#243;lo en C, MASM, FASM, NASM y TASM.<td>NORMAL, UNSAFE, BENCHMARK</table><span style='font-size:8pt'>* Cada fichero de procesamiento por lotes utiliza un subconjunto de estas opciones y valores.</span><p>Ejecute el BAT para generar las librer&#237;as para todas las plataformas de audio soportadas: WINMM, OpenAL y DirectX DIrectSound. &#161;Eso es todo!<p>&nbsp;<br><a name='4'><b>Ejemplos</b></a><p>Ejemplos de uso para cada compilador se encuentran en carpetas separadas. Cada carpeta contiene tanto la versi&#243;n para WINMM, como para DirectX. La mayor&#237;a tambi&#233;n incluye ejemplos para OpenAL. Algunos de los ejemplos mas representativos vienen acompa&#241;ados de ejecutables precompilados para mostrar el menor tama&#241;o de ejecutable conseguido hasta el momento. N&#243;tese que los ejecutables no estan comprimidos, ni empaquetados.<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Carpeta<td width=160>Compilador<td>Autor(es)<td>Comentarios<tr><td>BCB<td>Borland C++ Builder<td><a href='mailto:sfengtfw@gmail.com'>dododo</a><td><tr bgcolor=#E7E7E7 valign=top><td>Delphi<td>Borland Delphi<td>*<td>Los usuarios de Delphi 5 - 7 pueden compilar los ejemplos con los ficheros de procesamiento por lotes incluidos para reducir al m&#225;ximo los ejecutables. Los usuarios de Delphi 9 o posterior s&#243;lo podr&#225;n compilar los ejemplos desde el IDE, ya que ciertas caracter&#237;sticas del compilador utilizadas en los BATs han cambiado en las &#250;ltimas versiones.<p>Adem&#225;s, encontrar&#225; unidades completas y actualizadas para DirectSound y OpenAL para Delphi. Las librer&#237;as uFMOD para DirectX DirectSound y OpenAL dependen de estas unidades. Tambi&#233;n puede usarlas por separado en sus proyectos.<tr valign=top><td>Fasm<td>Flat Assembler<td>bogrus, *<td>Ejemplos para FASM puro (sin linker) y con linker de MS o Polink, con el &#225;nimo de mostrar ambas formas de construir un ejecutable usando FASM.<tr bgcolor=#E7E7E7 valign=top><td>Masm32<td>MASM32<td>*<td>Los ejemplos mas complejos. La idea es ubicar el c&#243;digo ejecutable y datos del programa en el interior de la pista XM para ahorrar unos cuantos bytes. &#161;S&#243;lo para verdaderos guru de la optimizaci&#243;n! Proyectos para RadASM IDE incluidos.<tr><td>Nasm<td>Netwide Assembler<td>*<td>Usando linker de MS o Polink.<tr bgcolor=#E7E7E7><td>Tasm<td>Borland Turbo Assembler<td>*<td>Proyectos para RadASM IDE incluidos.<tr valign=top><td>PureBasic<td>PureBasic<td><a href='http://flaith.free.fr/'>flaith</a>, chris_b<td>Estos ejemplos requieren de PureBasic versi&#243;n 3.50 o posterior. Copie las librerias PureLibrary (Ufmod y DSUfmod) en [PureBasic]\PureLibraries\UserLibraries antes de compilar los proyectos. El fichero de ayuda se encuentra en la subcarpeta HELP. Puede copiarlo en [PureBasic]\Help si desea usarlo directamente desde el entorno de desarrollo (IDE).<p>El ejemplo de uso con OpenAL requiere del PureBasic OpenAL SDK, el cual se puede encontrar en el sitio web del proyecto <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>.<tr bgcolor=#E7E7E7><td>VisualBasic6<td>Visual Basic 6<td>*<td>&#161;Lea atentamente las instrucciones en el <a href='..\Examples\VisualBasic6\Readme\es.txt'>documento adjunto</a> antes de compilar!<tr valign=top><td>C<td>Visual C/C++, Dev-C++<td>*<td>Ejemplos de reproductores XM en C puro. Cargar / detener, pausar / reanudar, silencio, control de volumen, indicador de progreso, medidor VU, arrastrar-y-soltar y hasta algunos efectos DX &#161;en 15Kb! Ambos ejemplos soportan Unic&#243;digo y el modo especial BENCHMARK (requiere recompilar la librer&#237;a en este modo primero). Se pueden compilar con Visual C++ 6.0, Visual C++ 2005/2008 Express Edition y Dev-C++ 4.9.9.2.<p>Tambi&#233;n encontrar&#225; aqu&#237; un ejemplo de uso de la funci&#243;n Jump2Pattern. Utiliza un XM compuesto de varias pistas, proporcionado por Kim (tambi&#233;n conocido como norki). Consulte la secci&#243;n <a href='#5'>siguiente</a> para mayor informaci&#243;n sobre pistas compuestas y la funci&#243;n Jump2Pattern.<p>Adem&#225;s, hay un ejemplo de uso de OpenAL con enlace din&#225;mico, el cual se puede ejecutar a&#250;n si la DLL de OpenAL no se encuentra disponible.<tr bgcolor=#E7E7E7 valign=top><td>BlitzMax<td>BlitzMax<td>*, <a href='http://flaith.free.fr/'>flaith</a><td><a href='..\Examples\BlitzMax\mod\ufmod.mod\ufmod.mod\doc\commands.html'>Documentaci&#243;n</a> (en ingl&#233;s).<p>Adem&#225;s, encontrar&#225; m&#243;dulos completos y actualizados para DirectSound y OpenAL para BlitzMax. Las librer&#237;as uFMOD para DirectX DirectSound y OpenAL dependen de estos m&#243;dulos. Tambi&#233;n puede usarlos por separado en sus proyectos.<tr valign=top><td>FreeBASIC<td>FreeBASIC<td>voodooattack, antarman<td>Utiliza una visualizaci&#243;n basada en el Torus de rel. Proyectos para FbEdit IDE incluidos.<tr bgcolor=#E7E7E7 valign=top><td>FreePascal<td>FreePascal<td>*<td>Probado con FPC v2.0.4.<p>Adem&#225;s, encontrar&#225; unidades completas y actualizadas para DirectSound y OpenAL para FreePascal. Las librer&#237;as uFMOD para DirectX DirectSound y OpenAL dependen de estas unidades. Tambi&#233;n puede usarlas por separado en sus proyectos.<tr valign=top><td>EBASIC<td>Emergence BASIC<td><a href='http://ts-soft.eu/'>ts-soft</a><td><tr bgcolor=#E7E7E7 valign=top><td>C#<td>.NET SDK<td>*<td>Algunos ejemplos en C# probados sobre .NET Framework 2.0. Combinan c&#243;digo CLI y nativo en el mismo ejecutable. Para poder usar la API de uFMOD en C# se implement&#243; una envoltura en C++ para que sirva de puente entre el c&#243;digo CLI y el nativo. C&#243;digo fuente completo incluido.</table><span style='font-size:8pt'>* Quantum, Asterix</span><p>&nbsp;<br><a name='5'><b>C&#243;mo lograr un ejecutable m&#225;s compacto</b></a><p>Utilice <a href='#22'>Eff</a> para optimizar la librer&#237;a uFMOD y hacerla mas peque&#241;a.<p>Si desea embeber la pista XM directamente en el ejecutable o anexarla como recurso binario, puede intentar primero optimizar el fichero XM. Modplug Player permite comprimir un fichero XM usando ADPCM, &#161;pero es un tipo de compresi&#243;n con p&#233;rdidas! Utilice <a href='#21'>XMStrip</a> para optimizaci&#243;n sin p&#233;rdidas (en t&#233;rminos de calidad del sonido.)<p>Si tiene plena certeza de que todos los XM que va a reproducir la aplicaci&#243;n son v&#225;lidos (ninguno puede estar corrupto o modificado), recompile la librer&#237;a en modo UNSAFE.<p>Utilice el comando no documentado <code>/opt:nowin98</code> en la l&#237;nea de comandos del linker de VC++ o MASM32 para reducir al m&#237;nimo la alineaci&#243;n de secciones. Las secciones .rdata (datos de s&#243;lo lectura, donde se encuentran la IAT y otras constantes) y .text (generalmente contiene c&#243;digo ejecutable) se pueden combinar en una. Adicione el siguiente comando en las opciones de MS LINK.EXE o POLINK.EXE: <code>/MERGE:.rdata=.text</code><p>Hay otro asunto interesante relacionado con el linker de MS. link.exe introduce cierta informaci&#243;n <i>innecesaria</i> entre el DOS stub y el inicio de la cabecera PE. Resulta sencillo localizar estos datos en un editor hexa, porque empiezan con la palabra 'Rich'. A continuaci&#243;n de esta palabra se encuentra el <i>compid</i> codificado de su PC. Si no desea que sus aplicaciones resulten <i>firmadas</i> de esta manera o simplemente prefiere no gastar unos cuantos bytes extra (en realidad, &#161;medio Kb!) en la firma, existen 2 formas de evitarlo. En primer lugar, puede cambiar de linker. Como alternativa, puede buscar el la red un art&#237;culo sobre c&#243;mo modificar link.exe. Por cierto, el art&#237;culo en ruso se puede encontrar en wasm.ru.<p>Delphi acostumbra incluir una secci&#243;n extra con fixups (.reloc) en cada ejecutable. Las DLL requieren de fixups, pero los ejecutables no. Entonces, intente eliminar la secci&#243;n .reloc para ahorrar en el tama&#241;o del ejecutable. Las herramientas <a href='http://www.jrsoftware.org/striprlc.php'>StripReloc</a> de Jordan Russel, <a href='http://www.uinc.ru/files/index_eng.shtml'>PE Optimizer</a> de Dr. Golova o cualquier otra aplicaci&#243;n similar sirven para este prop&#243;sito, en caso de que no sepa c&#243;mo eliminar los fixups manualmente.<p>Visual Basic y Delphi suelen crear una secci&#243;n de recursos (.rsrc) a&#250;n cuando su contenido no represente utilidad alguna. Entonces, por lo general, resulta seguro eliminar la secci&#243;n completa .rsrc, siempre y cuando no contenga plantillas, pistas XM o cualquier otro recurso que su aplicaci&#243;n en verdad necesite. La misma observaci&#243;n tiene validez para la secci&#243;n .flat en un ejecutable generado con PureBasic. &#161;Tenga mucho cuidado al realizar esta clase de operaciones con el ejecutable!<p>Empaquetadores y compresores, como <a href='http://www.xtreeme.prv.pl/'>FSG</a> y <a href='http://upx.sf.net/'>UPX</a>, logran reducir el tama&#241;o del ejecutable. Sin embargo, para mayor objetividad, los ejecutables de ejemplo &#161;no estan comprimidos!<p>Al usar librer&#237;as de importaci&#243;n en formato MS-COFF (como kernel32.lib, libkernel32.a, etc.) se desperdicia algo de espacio en el ejecutable para almacenar las tablas de thunks originales. Estas tablas s&#243;lo se usan al hacer binding. Si Ud. no tiene pensado hacer binding con su ejecutable, puede prescindir de estas tablas y ahorrar hasta 512 bytes o hasta un par de kilobytes, si est&#225; usando muchas funciones externas (funciones que se encuentran en DLLs). Para ello debe reemplazar las librer&#237;as de importaci&#243;n que vienen con el SDK de su compilador (Visual Studio, masm32, etc.) por versiones modificadas. Dichas versiones modificadas se pueden construir con el <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>.<p>Eso era pr&#225;cticamente todo lo que se debe saber sobre la optimizaci&#243;n del tama&#241;o de un ejecutable. Ahora veamos otra t&#233;cnica interesante para minimizar el tama&#241;o de los ficheros XM:<p>Es posible unir varias pistas XM en un solo fichero compuesto. Ya que es posible compartir los instrumentos entre las pistas en el fichero compuesto, el tama&#241;o resultante de este fichero puede ser mucho menor que la suma de los tama&#241;os de los ficheros por separado. A&#250;n sin compartir los instrumentos el tama&#241;o debe ser menor, puesto que s&#243;lo se usa un &#250;nico ejemplar de cabecera XM. Veamos un ejemplo con 3 ficheros XM:<pre>
<b>Fichero 1 :</b> CABECERA_XM1 P11 P12 P13     I11 I12
<b>Fichero 2 :</b> CABECERA_XM2 P21 P22 P23 P24 I21 I22 I23 I24
<b>Fichero 3 :</b> CABECERA_XM3 P31             I31
</pre><i><b>Leyenda:</b> CABECERA_XMn es la cabecera del n-&#233;simo fichero. Pni es el i-&#233;simo patr&#243;n del n-&#233;simo fichero. Ini es el i-&#233;simo instrumento del n-&#233;simo fichero.</i><p>Primero, vamos a unir los 3 ficheros en uno solo sin compartir los instrumentos:<pre>
<b>Fichero 4 :</b> CABECERA_XM4 P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I23 I24 I31
</pre>Supongamos que I12 es muy similar o identico a I23 y que I24 es igual que I31. Podemos modificar P2n para hacer que utilicen I12 en vez de I23 y enlazar P31 con I24. Entonces, podremos eliminar I23 e I31:<pre>
<b>Fichero 4 :</b> CABECERA_XM4 P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I24
</pre>Al final tendr&#225; que modificar los comandos de ciclos y saltos de patrones y las referencias a instrumentos en los "ficheros" 2 y 3. Obviamente, tambi&#233;n es posible unir apenas 2 o m&#225;s de 3 ficheros, aunque el formato XM establece l&#237;mites para el n&#250;mero m&#225;ximo de patrones e instrumentos en un fichero. Esa es, en general, la idea. Es necesario saber usar un tracker para realizar todas estas operaciones sobre un fichero XM. Una vez unidas todas las pistas en un fichero compuesto, podr&#225; iniciar la reproducci&#243;n con un &#250;nico llamado a uFMOD_PlaySong y "activar" las pistas por separado con llamados a uFMOD_Jump2Pattern. Por ejemplo, uFMOD_Jump2Pattern(3) pasaria a reproducir la segunda pista, uFMOD_Jump2Pattern(7) saltaria a la tercera y uFMOD_Jump2Pattern(0) regresaria a la primera. Los indices exactos en cada caso dependen de los patrones asignados con el tracker. En C\WINMM\ hay un ejemplo practico.<p>El uso de Jump2Pattern tiene otra ventaja: la conmutaci&#243;n de pistas se realiza mucho m&#225;s r&#225;pido (casi de inmediato) que el proceso habitual de parar la pista actual y cargar una pista nueva. Por lo tanto, puede usar esta t&#233;cnica cuando necesite conmutar las pistas de audio de la manera m&#225;s r&#225;pida posible.<p>&nbsp;<br><a name='6'><b>Preguntas frecuentes</b></a><p><span style='color:#008080'><b>P:</b> &#191;Es uFMOD gratis para cualquier tipo de uso, incluido el comercial?</span><br><b>R:</b> Si, actualmente as&#237; es.<p><span style='color:#008080'><b>P:</b> &#191;En donde puedo conseguir m&#250;sica en formato XM?</span><br><b>R:</b> En <a href='http://modarchive.org/'>The Mod Archive</a> hay un enorme archivo de m&#250;sica gratis en formatos XM, IT, S3M y MOD. Puede usar el <a href='http://www.modplug.com/'>Open Modplug Tracker</a> para convertir ficheros IT, S3M y MOD a formato XM sin perder la calidad. Hay muchos compositores talentosos en la red dispuestos a compartir su m&#250;sica de manera gratuita. &#161;Pero no olvide el copyright!<p><span style='color:#008080'><b>P:</b> &#191;Existe alguna relaci&#243;n entre el proyecto uFMOD y las librer&#237;as FMOD y/o miniFMOD de Firelight Technologies&#174;?</span><br><b>R:</b> Ya no. Hasta el a&#241;o 2004 uFMOD se bas&#243; en el c&#243;digo fuente abierto de la librer&#237;a miniFMOD. Desde ese entonces, el c&#243;digo fuente de uFMOD fue completamente reescrito, optimizado y depurado. Tambi&#233;n fueron agregadas muchas funciones nuevas. Por lo tanto, la versi&#243;n actual de uFMOD no tiene relaci&#243;n alguna con FMOD o miniFMOD.<p><span style='color:#008080'><b>P:</b> Algunas librer&#237;as aseguran incrementar el tama&#241;o del ejecutable en N kilobytes. &#191;En cuanto se incrementa el tama&#241;o de un ejecutable con uFMOD?</span><br><b>R:</b> No es posible establecer un valor exacto, ya que el tama&#241;o depende de muchos factores, a saber: funciones usadas (en especial, si se utiliza la herramienta EFF), c&#243;digo de la aplicaci&#243;n principal, tama&#241;o del fichero XM (cuando el XM es embebido en el ejecutable). Tambi&#233;n depende de las opciones del linker. El ejemplo MASM32\minimal.exe ocupa &#250;nicamente 5.632 bytes sin compresi&#243;n, sin alterar la estructura del ejecutable, ni otros trucos "sucios" para reducir el tama&#241;o.<p><span style='color:#008080'><b>P:</b> &#191;En d&#243;nde puedo conseguir la especificaci&#243;n oficial del formato XM?</span><br><b>R:</b> No existe especificaci&#243;n oficial actualizada. En cambio, puede estudiar el documento <a href='http://sourceforge.net/project/showfiles.php?group_id=158498&package_id=234625'>"The Unofficial XM File Format Specification: FastTracker II, ADPCM and Stripped Module Subformats"</a> (s&#243;lo en ingl&#233;s). Este documento describe la mayor&#237;a de los aspectos relevantes del formato XM original, al igual que todas las extensiones extraoficiales actualmente soportadas por uFMOD. Los c&#243;digos fuente de ModPlug (en C++) sirven de referencia sobre formatos derivados del MOD, XM, IT, S3M y muchos otros.<p>&nbsp;<br><a name='7'><b>Agradecemos a</b></a><p>antarman, Barracuda, bogrus, chris_b, cresta, dododo, flaith, Four-F, GL#0M, norki, q_q, SofT MANiAC, S_T_A_S_, ts-soft, voodooattack y yoxola por reportar errores, sugerir nuevas ideas, aportar ejemplos de uso y de otras formas ayudarnos a mejorar uFMOD.<p><a href='http://wasm.ru'>[WASM.RU]</a> y <a href='http://sf.net'>SourceForge.net</a> por el soporte y hosting.<p>&nbsp;<br><b>Copyright</b><p>Los c&#243;digos fuente y ficheros binarios de uFMOD &#169; 2005 - 2008 Asterix y Quantum.<br>Todos los derechos reservados.<p>Pistas de ejemplo:<ul><li>Minimal III &#169; 2006 - 2008 SofT MANiAC (CoolPHat).<li>BlitzXMK.XM del ejemplo Jump2Pat &#169; 2007 - 2008 Kim (tambi&#233;n conocido como norki).</ul></div><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#708090><td height=1><tr bgcolor=#E7E7E7><td height=52 style='color:#708090;font-size:10pt;font-family:Arial,Aerial' align=center>&#191;Desea reportar un error? &#191;Tiene preguntas o sugerencias?<br> &#191;Est&#225; desarrollando un gran proyecto usando uFMOD? Por favor, mantenganos al tanto: <a href='mailto:ufmod@users.sf.net'>ufmod@users.sf.net</a></table></body></html>