<html lang=ru><head><meta http-equiv=Content-Type content="text/html; charset=windows-1251"><title>uFMOD</title></head><body style='margin:0'><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#E7E7E7 align=center><td height=20 style='color:#708090;font-size:9pt;font-family:Arial,Aerial'>[ <a href='en.htm'>English</a> | <a href='es.htm'>Espa&#241;ol</a> | Pycc&#954;u&#250; ]<tr bgcolor=#708090><td height=1></table><center><h2 style='font-size:14pt;font-family:Arial,Aerial'>&#956;FMOD v1.25.2 для Win32</h2></center><div style='font-size:10pt;font-family:Arial,Aerial;text-align:justify;margin:8'><p>uFMOD - это компактная, шустрая, надёжная, мультиплатформенная библиотека для качественного воспроизведения аудио в формате XM, разработанная полностью на ассемблере. XM может храниться в отдельном файле, в ресурсах или предварительно загружен в память. Поддерживаются также битые и не совсем стандартные файлы. Библиотека распространяется с открытым исходным кодом и примерами для следующих компиляторов: Visual C++, C#, Visual Basic, PureBasic, FreeBASIC, BlitzMax, Emergence BASIC, Delphi, Borland C++ Builder, Dev-C++ (MingW), FreePascal, MASM32, FASM, NASM и TASM.<p><ul><li><a href='#1'>WINMM, DirectSound или OpenAL?</a><li><a href='#2'>Утилиты</a><ul><li><a href='#21'>XMStrip</a><li><a href='#22'>Eff</a></ul><li><a href='#3'>Компиляция библиотеки</a><li><a href='#4'>Примеры</a><li><a href='#5'>Дополнительное уменьшение размера</a><li><a href='#6'>ЧаВо</a><li><a href='#7'>Благодарности</a></ul><p>&nbsp;<br><a name='1'><b>WINMM, DirectSound или OpenAL?</b></a><p>uFMOD для Win32 поддерживает WINMM, DirectX&#174; DirectSound и <a href='http://www.openal.org/'>OpenAL</a>. Все 3 подсистемы имеют свои плюсы и минусы. DirectX предоставляет возможность использовать звуковые эффекты, позволяет проигрывать одновременно несколько звуковых сигналов, поддерживает трёхмерный звук, спроектирован более надёжно чем WINMM. Зато WINMM поддерживается даже в Windows 95. OpenAL кроссплатформенна (доступны версии для Windows, Linux, Macintosh и <a href='http://www.openal.org/platforms.html'>т.д.</a>), поддерживает аппаратное ускорение эффектов 3D-окружения, что очень полезно для разработчиков игр. Тем не менее, OpenAL не поставляется предустановленной в Windows XP и более ранних версиях, за исключением OEM машин со звуковыми карточками Creative. Таким образом, Вам скорее всего придётся скачать и установить OpenAL самостоятельно. В зависимости от аппаратуры и драйверов, качество звука может быть лучше в DirectSound или WINMM, хотя среднестатистический пользователь вряд ли почувствует разницу. Если вы не уверены какую версию uFMOD выбрать для своего проекта, скорее всего вам больше подойдёт стандартная версия с WINMM, так как она проще в использовании: для воспроизведения звука достаточно добавить всего лишь пару строчек кода.<p>&nbsp;<br><a name='2'><b>Утилиты</b></a><p>В комплект включена пара бесплатных утилит для использования совместно с uFMOD: XMStrip и Eff. Обе утилиты совмещают в себе консольный и графический (GUI) интерфейсы. Если присутствуют параметры командной строки, включается консольный режим. Режим GUI интуитивно понятен, так что дальнейшее описание касается только консольного.<p><table border=0 cellpadding=0 cellspacing=0 bgcolor=#708090 style='font-size:9pt;font-family:Arial,Aerial'><tr><td colspan=3 height=1><tr height=18><td style='color:#E7E7E7'><b>&nbsp;SVN&nbsp;</b><td bgcolor=#E7E7E7>&nbsp;<a href='http://ufmod.svn.sourceforge.net/viewvc/ufmod/Win32'>Исходники доступны через SVN</a>&nbsp;<td width=1><tr><td colspan=3 height=1></table><p><a name='21'><b><i>XMStrip</i></b></a> обрабатывает заданный XM файл с целью уменьшения размера, без потери качества звучания. В процессе обработки, XMStrip удаляет неиспользующиеся инструменты и партитуры, вырезает комментарии и перепаковывает внутренние структуры файла для уменьшения размера и повышения скорости загрузки. Для начала, откроем командный интерпретатор и введём <code>xmstrip /h</code> чтобы получить следующее сообщение:<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#008000> uFMOD XMSTRIP</font><font color=#FFFFFF>
 USAGE:  xmstrip [options] file [output]
         file   - input file name, which can
                  contain wildcards (* and ?)         
                  for batch processing.
         output - optional output file name
 options:
  /c - clean only (don't strip)
 When [output] is not specified, XMSTRIP
 attempts to overwrite the input. If file
 name contains spaces, enclose it in "".</font></table></center><p>Если имя сохраняемого файла не указано, XMStrip перезапишет заданный файл. Если имя файла содержит пробелы, его необходимо заключить в кавычки (""). XMStrip поддерживает пакетную обработку файлов (символы * и ?).<p>Имейте в виду, что другие проигрыватели XM файлов, возможно, откажутся воспроизводить файл, обработанный XMStrip. Опция <b>/c</b> предусмотрена для восстановления таких файлов или обработки обычных XM файлов, которые планируется проигрывать не только в uFMOD.<p><a name='22'><b><i>Eff</i></b></a> предназначается для опытных кодеров, желающих сэкономить каждый байт в своих приложениях. Для этого нужно выделить только те функции uFMOD, которые действительно будут использованы в целевом приложении, перекомпилировать библиотеку и получить наименьший возможный размер. Вот, что выдаёт <code>eff /h</code> :<p><center><table border=0 cellpadding=8><tr bgcolor=#000000><td><pre><font color=#008000> uFMOD XM effects extractor</font><font color=#FFFFFF>
 USAGE:  eff [options] file
         file - input file name
         options:
          /Dm - generate a masm32/tasm dump
          /Dd - generate a Pascal (Delphi) dump
          /Dc - generate a C/C++ dump
          /Ds - generate an RCDATA resource dump
          /Di - disable infoAPI:
                    uFMOD_GetStats, uFMOD_GetRowOrder,
                    uFMOD_GetTitle and uFMOD_GetTime
          /Dp - disable uFMOD_Pause, uFMOD_Resume
                    and XM_SUSPENDED
          /Dv - disable volume control
          /Dj - disable Jump2Pattern
          /Df - disable loading XM from file
          /Dr - disable loading XM from resource
          /Dl - disable XM_NOLOOP
          /M  - mark & clear unused chunks of
                data in a masm32/tasm compatible dump</font></table></center><p>Последний параметр - имя XM файла, на использование которого ориентируются следующие параметры оптимизации:<ul><li><b>/Dm</b> создаёт текстовый дамп данного XM файла для использования в исходнике на MASM32 или TASM. Примеры для MASM32 и TASM, в текущем дистрибутиве uFMOD, используют эти дампы вместо обычных ресурсов для оптимизации размера экзешника.<li><b>/Dd</b> и <b>/Dc</b> создают подобные дампы, но для Pascal (Delphi, Kylix, FreePascal) или C/C++ соответственно.<li><b>/Ds</b> создаёт аналогичный дамп в формате RCDATA, который используется в скриптах описания ресурсов (*.rc). Не все компиляторы ресурсов поддерживают синтаксис Microsoft: <code>id RCDATA "имя_файла"</code>. Поэтому приходится использовать дампы для совместимости, например, со старыми версиями компилятора ресурсов GNU, вроде того, что входит в состав Dev-C++.<li>Ключ <b>/Di</b> отключает все информативные функции: uFMOD_GetStats, uFMOD_GetRowOrder, uFMOD_GetTitle и uFMOD_GetTime. Это даёт выигрыш не только в размере библиотеки, но и в скорости.<li><b>/Dp</b> отключает функции uFMOD_Pause и uFMOD_Resume и поддержку флага XM_SUSPENDED. Если Вы не собираетесь использовать pause/resume, включите этот ключ в параметры командной строки для экономии ещё нескольких байт.<li>uFMOD_SetVolume увеличивает не только размер библиотеки, но ещё и загрузку CPU. Добавьте ключ <b>/Dv</b>, чтобы отключить эту функцию и сэкономить несколько байт и тактов ;)<li><b>/Dj</b> отключает функцию Jump2Pattern. Данная функция предназначена для очень специфичных задач и, поэтому, используется редко. В разделе <a href='#5'>"Дополнительное уменьшение размера"</a> подробно описано использование Jump2Pattern.<li>Вам не нужна поддержка загрузки файлов и/или ресурсов? - Всё равно эффективнее использовать дампы вместо ресурсов! Тогда, не задумываясь, включайте <b>/Df</b> и <b>/Dr</b> для дополнительного уменьшения размера.<li>Ключ <b>/Dl</b> (маленькая L) отключает поддержку флага XM_NOLOOP (и, следовательно, благотворно влияет на размер и скорость).<li>Совсем "экстремальный" вид оптимизации предусмотрен специально для кодеров MASM32/TASM. В каждом XM файле есть цепочки байт, которые зарезервированы на будущее, или просто содержат комментарии или любую другую, не имеющую отношения к проигрыванию, информацию. <b>/M</b> выделяет эти "дыры", предоставляя возможность заполнить их полезной информацией (разместить данные или даже код). Пример Masm32\winmm\ как раз использует эту опцию.</ul>Eff создаёт файл EFF.INC и, согласно заданным опциям, текстовый дамп. Рассмотрим несколько одинаковых примеров (все верны):<p><b>eff /Dmpvjfrl /M file.xm<br>eff /M /Dm /Dp /Dv /Dj /Df /Dr /Dl file.xm<br>eff -M -Dmpvjfrl file.xm</b><p>Любой из предыдущих примеров создаст дамп для MASM32/TASM, выделит "дыры" и предварительно заполнит их нулями. Файл EFF.INC содержит список эффектов XM, которые действительно используются в заданном файле, и некоторые дополнительные флаги для отключения pause/resume, регулятора громкости, Jump2Pattern, поддержки файлов и ресурсов и XM_NOLOOP. Поместите этот новый EFF.INC в ufmodlib\src\ и перекомпилируйте библиотеку (в следующем разделе освещены некоторые вопросы касающиеся компиляции исходников библиотеки). Теперь у Вас имеется свой собственный оптимизированный билд uFMOD, но имейте в виду, что в этом билде включены не все эффекты XM. Поэтому, не следует использовать его для проигрывания других XM файлов, отличных от обработанного утилитой Eff!<p>&nbsp;<br><a name='3'><b>Компиляция библиотеки</b></a><p>Необходимость компиляции исходников библиотеки uFMOD возникает при использовании утилиты <a href='#22'>Eff</a>, а также для включения особых режимов и опций, которые отключены в сборке по умолчанию (см. таблицу <b>Опции</b> ниже). Для тех, кто хочет попрактиковаться в ассемблере и/или разобраться в библиотеке на самом низком уровне (в хорошем смысле), и предназначен данный раздел.<p>Исходники uFMOD расположены в ufmodlib\src\:<ul><li><span style='color:#800080'><b>eff.inc</b></span> - этот заголовочный файл создаётся утилитой <a href='#22'>Eff</a>. Не рекомендуется редактировать данный файл вручную.<li><span style='color:#800080'><b>equs.inc</b></span> содержит определения структур и констант, используемых в исходниках библиотеки.<li>В <span style='color:#008080'><b>core.asm</b></span> находится большая часть исходного кода uFMOD. Этот самый файл присутствует во всех дистрибутивах библиотеки: Win32, Linux, Unix/BSD и KolibriOS. Загрузка XM-файла, смешивание каналов, наложение XM-эффектов и многие другие общие для всех дистрибутивов алгоритмы реализованы в данном файле.<li><span style='color:#008080'><b>ufmod.asm</b></span> содержит платформозависимые процедуры: чтение файлов и ресурсов, создание потоков и т.д. Поэтому, содержимое данного файла различается в дистрибутивах для разных ОСей.<li><span style='color:#008080'><b>fasm.asm</b></span> хранит определения констант, структур и т.д. под синтаксис Flat Assembler (FASM). Этот файл позволяет собирать различные версии библиотеки с помощью FASM.<li><span style='color:#008080'><b>masm.asm</b></span> хранит определения констант, структур и т.д. под синтаксис MASM32/TASM. Этот файл позволяет собирать различные версии библиотеки с помощью MASM32 или TASM.<li><span style='color:#008080'><b>nasm.asm</b></span> хранит определения констант, структур и т.д. под синтаксис Netwide Assembler (NASM). Этот файл позволяет собирать различные версии библиотеки с помощью NASM.<li><span style='color:#000080'><b>ufmod.desc</b></span>, <span style='color:#000080'><b>oalufmod.desc</b></span> и <span style='color:#000080'><b>dsufmod.desc</b></span> содержат описания библиотек для PureBasic. PureBasic Library SDK использует эти файлы при компиляции библиотек uFMOD в формате PureLibrary.<li><b>ufmod.def</b>, <b>oalufmod.def</b> и <b>dsufmod.def</b> содержат определения экспорта для компиляции uFMOD в формате DLL.</ul>ufmodlib\import\ содержит исходники библиотек импорта, которые используются совместно с uFMOD в различных примерах. Некоторые из них используются самой библиотекой в Visual Basic 6 и FreePascal. Уже собранные версии данных библиотек импорта хранятся в ufmodlib\lib\. Исходники полных библиотек импорта для DirectSound и OpenAL под разные компиляторы также находятся тут. Все эти библиотеки можно пересобрать с помощью <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>. ufmodlib\import\<b>buildall.bat</b> - батник, который перекомпилирует все вышеописанные библиотеки импорта.<p>При создании библиотеки в формате OMF для совместимости с Delphi используется утилита, которая находится в ufmodlib\bin\. Хотя данная утилита и уступает по мощности OMF2D EliCZ'а, она вполне справляется с задачей создания библиотеки uFMOD совместимой с Delphi. При компиляции библиотеки в формате OMF при помощи NASM, используется <b>o4delphi</b>.<p><table border=0 cellpadding=0 cellspacing=0 bgcolor=#708090 style='font-size:9pt;font-family:Arial,Aerial'><tr><td colspan=3 height=1><tr height=18><td style='color:#E7E7E7'><b>&nbsp;SVN&nbsp;</b><td bgcolor=#E7E7E7>&nbsp;<a href='http://ufmod.svn.sourceforge.net/viewvc/ufmod/Win32'>Исходники доступны через SVN</a>&nbsp;<td width=1><tr><td colspan=3 height=1></table><p>Следующим, после внесения изменений в исходники, шагом является компиляция. Выберите один из батников в ufmodlib\, в зависимости от целевого компилятора, для которого нужно собрать библиотеку. Следующая таблица поможет сделать выбор:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Батник<td>Компилятор(ы)<td>Комментарии<tr valign=top><td>mk_coff<td>Visual C/C++, Dev-C++ (MingW), <a href='http://www.flatassembler.net/'>FASM</a>, <a href='http://nasm.sourceforge.net/'>NASM</a>, MASM32, <a href='http://sourceforge.net/projects/fbc/'>FreeBASIC</a><td>Рекомендуется использовать FASM для сборки библиотеки в формате COFF.<tr bgcolor=#E7E7E7 valign=top><td>mk_omf<td>Borland Delphi, Borland C++ Builder, TASM<td>Пользователи Borland C++ Builder и TASM должны установить значение LIB в опции UF_FMT перед сборкой. Пользователи Delphi должны установить значение OBJ.<tr><td>mk_vb6<td>Visual Basic 6<td><tr bgcolor=#E7E7E7><td>mk_pbas<td>PureBasic<td><tr><td>mk_bmax<td>BlitzMax<td><tr bgcolor=#E7E7E7><td>mk_fpas<td><a href='http://sourceforge.net/projects/freepascal/'>FreePascal</a><td><tr><td>mk_ebas<td>Emergence BASIC<td><tr bgcolor=#E7E7E7><td colspan=3 height=2></table><p>Теперь откройте выбранный батник в текстовом редакторе. Всё, что находится между следующих строк:<pre>rem *** CONFIG START</pre>и<pre>rem *** CONFIG END</pre>подлежит настройке. Первым делом обратите внимание на секцию <code>Pathes</code>, в которой прописаны все пути к утилитам, используемым в процессе компиляции. Там может попасться такая опция:<pre>SET UF_MASM=C:\masm32</pre>Если у Вас установлен MASM32, удостоверьтесь, что путь в данной опции указывает точно туда, где находится MASM32. Допустим, MASM32 установлен в <code>D:\TOOLS\MASM32</code>. В таком случае, необходимо скорректировать опцию следующим образом:<pre>SET UF_MASM=D:\TOOLS\MASM32</pre>Не все пути необходимы для успешной компиляции. Например, если Вы намерены использовать FASM, не нужно настраивать UF_MASM. Некоторые пути содержат имена исполнимых файлов. Например:<pre>SET UF_ARCH=ar</pre>ar.exe должен находиться в одном из каталогов в списке переменной окружения PATH. Если это не так, необходимо указать полный путь. Предположим, ar.exe находится в <code>C:\Program files\BlitzMax\bin</code>. Тогда опцию UF_ARCH нужно определить следующим образом:<pre>SET UF_ARCH=C:\Program files\BlitzMax\bin\ar.exe</pre>Проверьте правильность остальных путей, необходимых для компиляции. Далее, настройте параметры конфигурации, согласно следующей таблице:<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Опция<sup>*</sup><td>Описание<td width=200>Значения<sup>*</sup><tr valign=top><td>UF_RAMP<td>Данная опция позволяет настроить механизм интерполяции, который предназначен для погашения щелчков - резкие перепады амплитуды сигнала, характерные для трекерской музыки. С другой стороны, интерполяция вносит искажение в высокочастотные спектральные составляющие сигнала, что иногда бывает заметно. STRONG - это значение по умолчанию, рекомендуемое для большинства приложений. В данном режиме миксер сглаживает резкие перепады амплитуды, применяя линейную 64-ступенчатую интерполяцию. WEAK накладывает лишь 16 ступеней - этот режим менее эффективен, чем STRONG, но зато вероятность деградации сигнала в этом режиме ниже. NONE вообще отключает интерполяцию. Без сглаживания не будет и деградации, но большинство композиций без сглаживания будет звучать заметно хуже из-за наложения щелчков. Особым образом сбалансированные композиции без сглаживания могут звучать лучше.<td>NONE, WEAK, STRONG<tr bgcolor=#E7E7E7 valign=top><td>UF_FREQ<td>Частота дискретизации (в Гц). 44100 было значением по умолчанию до версии 1.20. При использовании значения 48КГц воспроизводится более чистый звук на большинстве звуковых карточек и потребляется меньше системных ресурсов. Поэтому, 48000 является новым значением по умолчанию, рекомендуемым для большинства приложений. 22050 предусмотрено для тех, кто ещё помнит славные деньки Amiga.<td>22050, 44100, 48000<tr valign=top><td>UF_UFS<td>Формат кодирования текста. Юникодовые приложения должны устанавливать значение UNICODE, за исключением BlitzMax, PureBasic и Visual Basic 6, так как опция UNICODE в этих случаях не поддерживается. Имейте в виду, что юникодовые приложения работают значительно быстрее на машинах линейки NT/XP. Опция UNICODE обязательна при компиляции uFMOD для .NET.<td>ANSI, UNICODE<tr bgcolor=#E7E7E7 valign=top><td>UF_FMT<td>Создать статическую библиотеку, просто обьектный файл или же DLL с соответствующими библиотеками импорта. Например, Delphi не поддерживает статические библиотеки. Поэтому для совместимости с Delphi нужно указать значение OBJ. Компиляторы C/C++ и ассемблеры поддерживают оба формата. Некоторые компиляторы вообще не поддерживают статическую линковку. В таких случаях приходится использовать DLL. Как раз для этого и предусмотрена последняя опция.<td>OBJ, LIB, DLL
<tr valign=top><td>UF_ASM<td>Ассемблер. Да, uFMOD можно собирать разными ассемблерами - выбирайте тот, который больше нравится :)<td>MASM, NASM, FASM, TASM<tr bgcolor=#E7E7E7 valign=top><td>UF_MODE<td>NORMAL - это значение по умолчанию. Ничего особенного. UNSAFE отключает проверку правильности формата XM перед загрузкой композиции. Если Вы уверены, что все композиции, которые будут проигрываться в вашем приложении, корректны (правильность формата XM-файла можно проверить в Eff или XMStrip), можете пересобрать библиотеку в режиме UNSAFE, чтобы выйграть в размере и скорости загрузки. Имейте в виду, что загрузка неправильного XM-файла в режиме UNSAFE может привести к краху! В режиме BENCHMARK доступен счётчик производительности, который хранит точное количество тактов, которое уходит на синтез чуть более 21 мс звука при частоте в 48 КГц. Данный режим предназначен для сравнения производительности различных версий библиотеки. За дополнительной информацией обращайтесь к примерам на C (см. описание флага BENCHMARK). Режим BENCHMARK доступен только в C, MASM, FASM, NASM и TASM.<td>NORMAL, UNSAFE, BENCHMARK</table><span style='font-size:8pt'>* Каждый батник использует подмножество данных опций и значений.</span><p>Запустите батник, чтобы собрать все доступные версии библиотеки: WINMM, OpenAL и DirectX DirectSound. Вот и всё!<p>&nbsp;<br><a name='4'><b>Примеры</b></a><p>В каждом из каталогов представлены примеры с использованием как WINMM, так и DirectX-версий uFMOD. Под большинство компиляторов доступны также примеры с использованием OpenAL-версии uFMOD. Некоторые примеры сопровождаются откомпилированными экзешниками, чтобы показать минимальный размер, характерный для данного компилятора. Заметьте, что экзешники представлены без сжатия.<p><table border=0 cellpadding=4 cellspacing=2 style='font-size:10pt;font-family:Arial,Aerial'><tr bgcolor=#708090 style='color:#E7E7E7;font-weight:bold'><td>Каталог<td width=160>Компилятор<td>Автор(ы)<td>Комментарии<tr><td>BCB<td>Borland C++ Builder<td><a href='mailto:sfengtfw@gmail.com'>dododo</a><td><tr bgcolor=#E7E7E7 valign=top><td>Delphi<td>Borland Delphi<td>*<td>Пользователи Delphi 5 - 7 могут собрать примеры с помощью предоставленных батников для дополнительного уменьшения размера экзешников. Пользователи Delphi 9 или новее могут собрать примеры только из IDE, так как некоторые особенности компилятора, используемые в батниках, претерпели изменения в последних версиях.<p>Вы также найдёте здесь полные версии юнитов DirectSound и OpenAL для Delphi. Библиотеки uFMOD под DirectX DirectSound и OpenAL используют данные юниты, но Вы можете задействовать их и в сторонних проектах.<tr valign=top><td>Fasm<td>Flat Assembler<td>bogrus, *<td>Примеры для FASM, как с использованием линкера от MS или Polink, так и без.<tr bgcolor=#E7E7E7 valign=top><td>Masm32<td>MASM32<td>*<td>Примеры показывают возможности "экстремальной" оптимизации с размещением кода и/или данных приложения прямо внутри аудио-потока для сокращения размера экзешника. Поэтому, данные примеры рассчитаны исключительно на фанатов оптимизации. Прилагаются файлы проектов для RadASM IDE.<tr><td>Nasm<td>Netwide Assembler<td>*<td>С использованием линкера от MS или Polink.<tr bgcolor=#E7E7E7><td>Tasm<td>Borland Turbo Assembler<td>*<td>Прилагаются файлы проектов для RadASM IDE.<tr valign=top><td>PureBasic<td>PureBasic<td><a href='http://flaith.free.fr/'>flaith</a>, chris_b<td>Требуется компилятор версии 3.50 или новее. Поместите соответствующие библиотеки в формате PureLibrary в каталог [PureBasic]\PureLibraries\UserLibraries перед компиляцией примеров. Документация для API-функций uFMOD в PureBasic доступна в подкаталоге HELP. Можете поместить данный CHM в каталог [PureBasic]\Help для использования прямо из среды разработки.<p>Пример использования под OpenAL опирается на PureBasic OpenAL SDK, который можно найти на официальном сайте <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>.<tr bgcolor=#E7E7E7><td>VisualBasic6<td>Visual Basic 6<td>*<td>Обязательно прочитайте сопутствующий <a href='..\Examples\VisualBasic6\Readme\ru.txt'>README-файл</a> перед использованием!<tr valign=top><td>C<td>Visual C/C++, Dev-C++<td>*<td>Компактные плееры XM-файлов на чистом C. Load / stop, pause / resume, muting, регулятор громкости, индикатор прогресса, индикатор уровней громкости (VU meter), поддержка перетаскивания (drag&drop) и даже некоторые эффекты DX. И всё это в 15Кб! Оба примера полностью поддерживают Юникод и специальный режим BENCHMARK (предварительно нужно пересобрать саму библиотеку в режиме BENCHMARK). Проверено в Visual C++ 6.0, Visual C++ 2005/2008 Express Edition и Dev-C++ 4.9.9.2.<p>Здесь также находится пример использования функции Jump2Pattern. В этом примере проигрывается композитный XM, любезно предоставленный товарищем Kim (он же norki). Описание техники создания и использования подобных композиций можно найти в <a href='#5'>следующем</a> разделе.<p>Ещё здесь находится пример динамической загрузки библиотеки OpenAL, который таким образом способен запускаться и в отсутствии openal32.dll.<tr bgcolor=#E7E7E7 valign=top><td>BlitzMax<td>BlitzMax<td>*, <a href='http://flaith.free.fr/'>flaith</a><td><a href='..\Examples\BlitzMax\mod\ufmod.mod\ufmod.mod\doc\commands.html'>Полная документация</a> (на английском).<p>Вы также найдёте здесь полные версии модулей DirectSound и OpenAL для BlitzMax. Библиотеки uFMOD под DirectX DirectSound и OpenAL используют данные модули, но Вы можете задействовать их и в сторонних проектах.<tr valign=top><td>FreeBASIC<td>FreeBASIC<td>voodooattack, antarman<td>Используется визуализация товарища rel, именуемая Torus. Прилагаются файлы проектов для FbEdit IDE.<tr bgcolor=#E7E7E7 valign=top><td>FreePascal<td>FreePascal<td>*<td>Проверено на FPC версии 2.0.4.<p>Вы также найдёте здесь полные версии юнитов DirectSound и OpenAL для FreePascal. Библиотеки uFMOD под DirectX DirectSound и OpenAL используют данные юниты, но Вы можете задействовать их и в сторонних проектах.<tr valign=top><td>EBASIC<td>Emergence BASIC<td><a href='http://ts-soft.eu/'>ts-soft</a><td><tr bgcolor=#E7E7E7 valign=top><td>C#<td>.NET SDK<td>*<td>Несколько примеров на C#, опробованных на .NET Framework 2.0. Примеры собираются в экзешник со смешанным управляемым/нативным содержимым. Чтобы портировать API uFMOD в C# мы собрали оболочку на C++, которая играет роль переходника между CLI и нативным кодом. Полные исходники прилагаются.</table><span style='font-size:8pt'>* Quantum, Asterix</span><p>&nbsp;<br><a name='5'><b>Дополнительное уменьшение размера</b></a><p>Утилита <a href='#22'>Eff</a> предназначена для оптимизации и уменьшения размера библиотеки uFMOD.<p>Если Вы собираетесь включить XM статически в экзешник или в качестве ресурса, можете попробовать оптимизировать сначала сам XM. Modplug Player умеет сжимать XM-композиции по схеме APDCM, но учтите, что этот тип сжатия пагубно влияет на качество звучания! Утилита <a href='#21'>XMStrip</a> перепаковывает XM файлы без потери качества.<p>Если Вы уверены в корректности формата всех композиций, которые будут использованы в приложении, можете пересобрать библиотеку в режиме UNSAFE.<p>При компиляции исполнимого модуля в VC++ или MASM32 включите директиву <code>/opt:nowin98</code> в аргументы командной строки линкера для уменьшения выравнивания секций до минимума. Секции .rdata (read-only data, где хранятся символы IAT и некоторые константы) и .text (код приложения) можно совместить для ещё большего уменьшения размера. Для этого достаточно добавить в опции MS LINK.EXE или POLINK.EXE следующую директиву: <code>/MERGE:.rdata=.text</code><p>Ещё один казус связан с линкером MS: link.exe добавляет в имидж экзешника некоторую <i>лишнюю</i> информацию, где-то между заглушкой DOS и началом PE заголовка. Балласт легко обнаруживается в хекс-редакторе по магическому слову 'Rich', за которым следует закодированный <i>compid</i> вашей машины. Если Вы против того, чтобы экзешники носили <i>подпись</i> машины, на которой были собраны, или просто не желаете тратить пол килобайта на эту самую подпись, можете поменять линкер :) Или найдите на wasm.ru документ, в котором подробно описан процесс патчинга link.exe.<p>Delphi любит создавать таблицу Relocation Table (секция .reloc) в обычных экзешниках (не DLL), где эта таблица зачастую абсолютно не нужна. Эту секцию можно убрать вручную или с помощью утилит <a href='http://www.jrsoftware.org/striprlc.php'>StripReloc</a> Джордана Расселя, <a href='http://www.uinc.ru/files/index.shtml'>PE Optimizer</a> Dr. Golova и т.п.<p>Visual Basic и Delphi создают секцию ресурсов (.rsrc), даже если им нечего действительно полезного в неё поместить. Если в этой секции нет форм, XM-ов или других нужных ресурсов, можете попробовать её удалить, только осторожно! Аналогично для секции .flat в экзешниках созданных в PureBasic.<p>Упаковщики, вроде <a href='http://www.xtreeme.prv.pl/'>FSG</a> и <a href='http://upx.sf.net/'>UPX</a>, умеют ужимать экзешники. Тем не менее, для наглядности, все примеры предоставлены без сжатия!<p>При использовании библиотек импорта в формате MS-COFF (вроде kernel32.lib, libkernel32.a и т.д.), тратится определённое количество байт в экзешнике на размещение таблиц с оригинальными санками (original thunks). Данные переходники нужны только при наложении "байндинга" (связывания импорта утилитой bind.exe из SDK Visual Studio). Если Вы не собираетесь "байндить" ваши экзешники, можете избавиться от санков и сэкономить до 512 байт, а то и пары килобайт при использовании большого количества импортируемых функций. Для этого необходимо заменить стандартные библиотеки импорта, которые поставляются вместе с SDK компилятора (Visual Studio, masm32, ...) на модифицированные и пересобрать нужные проекты. Модифицированные библиотеки импорта можно создать с помощью <a href='http://implib.sourceforge.net/'>ImpLib SDK</a>.<p>Вот, собственно, и всё, что нужно знать об оптимизации размера экзешника. Давайте вернёмся к теме сокращения размера XM-файлов:<p>Есть ещё один хитрый способ оптимизации размера XM-файлов, который заключается в совмещении сразу нескольких композиций в одном файле. При этом можно удалять лишние экземпляры повторяющихся инструментов, если таковые имеются, что очень заметно сказывается на размере конечного файла. Даже без оптимизации инструментов размер композитного файла должен получиться меньше суммы размеров отдельных файлов, так как заголовки всех файлов заменяются одним общим. Давайте рассмотрим пример с тремя файлами:<pre>
<b>Файл 1 :</b> XM1_HEADER P11 P12 P13     I11 I12
<b>Файл 2 :</b> XM2_HEADER P21 P22 P23 P24 I21 I22 I23 I24
<b>Файл 3 :</b> XM3_HEADER P31             I31
</pre><i><b>Пояснение:</b> XMn_HEADER - это заголовок n-ного файла. Pnm - это m-ная партитура n-ного файла. Inm - это m-ный инструмент n-ного файла.</i><p>Для начала, совместим все 3 композиции без оптимизации инструментов:<pre>
<b>Файл 4 :</b> XM4_HEADER P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I23 I24 I31
</pre>Представьте, что I12 очень похож или идентичен I23; I24 и I31 тоже практически одинаковы. Мы можем заставить партитуры P2n использовать I12 вместо I23, а P31 переключить на I24. Тогда мы сможем удалить I23 и I31:<pre>
<b>Файл 4 :</b> XM4_HEADER P11 P12 P13 P21 P22 P23 P24 P31 I11 I12 I21 I22 I24
</pre>Необходимо скорректировать команды зацикливания и ссылки на партитуры в композициях 2 и 3 после совмещения. Конечно, можно совмещать и большее количество композиций, но формат XM имеет ограничения на максимальное количество партитур и инструментов в файле. Все операции над XM-файлами надлежит проводить в специальном ПО - трекере. Для проигрывания композитного файла достаточно одного вызова функции uFMOD_PlaySong. Далее нужно использовать функцию uFMOD_Jump2Pattern для проигрывания отдельных композиций из общего файла в произвольной последовательности. Например, uFMOD_Jump2Pattern(3) переключится на вторую композицию, uFMOD_Jump2Pattern(7) начнёт проигрывать третью, а uFMOD_Jump2Pattern(0) вернётся обратно к первой. Точные значения индексов стартовых партитур каждой композиции после совмещения легко вычислить в уме, но можно и в трекере подсмотреть :) C\WINMM\ содержит реальный пример всего вышесказанного.<p>В использовании Jump2Pattern есть ещё один плюс - переключение происходит гораздо быстрее (практически моментально) чем при остановке текущей композиции и последующей загрузке новой. Можете брать на вооружение эту фишку для реализации решений, требующих максимально быстрого переключения музыкального фона.<p>&nbsp;<br><a name='6'><b>ЧаВо</b></a><p><span style='color:#008080'><b>В:</b> Библиотека uFMOD действительно бесплатна для любого использования, включая коммерческое?</span><br><b>О:</b> Да, текущая версия абсолютно бесплатна для использования в любых целях.<p><span style='color:#008080'><b>В:</b> Где бы достать композиции в формате XM?</span><br><b>О:</b> <a href='http://modarchive.org/'>The Mod Archive</a> содержит внушительных размеров архив с бесплатными трекерскими композициями в формате XM, IT, S3M и MOD. <a href='http://www.modplug.com/'>Open Modplug Tracker</a> умеет конвертировать IT, S3M и MOD в XM без потери качества. В сети много талантливых композиторов, которые бесплатно выкладывают свои работы. Не забывайте указывать соответствующие пометки об авторстве!<p><span style='color:#008080'><b>В:</b> Существует ли какая-либо связь между проектом uFMOD и разработками Firelight Technologies&#174;: FMOD и miniFMOD?</span><br><b>О:</b> На данный момент никакой связи уже нет. До 2004го года включительно проект uFMOD основывался на исходных кодах библиотеки miniFMOD. С тех пор, код uFMOD был полностью переписан, оснащён новыми функциями, оптимизирован и отлажен. Таким образом, uFMOD более не связан ни с FMOD, ни с miniFMOD.<p><span style='color:#008080'><b>В:</b> Некоторые разработчики утверждают, что их библиотеки увеличивают экзешники на N-ное количество килобайт. На сколько килобайт увеличивается размер экзешника при использовании uFMOD?</span><br><b>О:</b> Точного ответа на этот вопрос нет, так как этот размер зависит от многих факторов: используемые характеристики библиотеки (особенно при использовании утилиты Eff), основной код программы, размер XM-файла (если XM включается в EXE). Размер также зависит от опций линкера. Пример MASM32\minimal.exe занимает 5632 байт без сжатия, модификации экзешника и прочих "грязных" способов уменьшить размер.<p><span style='color:#008080'><b>В:</b> Где можно раздобыть официальное описание формата XM?</span><br><b>О:</b> Полного официального описания современного формата XM нет. Позвольте предложить взамен этот документ: <a href='http://sourceforge.net/project/showfiles.php?group_id=158498&package_id=234625'>"The Unofficial XM File Format Specification: FastTracker II, ADPCM and Stripped Module Subformats"</a> (только на англ.). В данном документе описаны многие тонкости работы с форматом XM, включая все нестандартные расширения, которые на данный момент поддерживает uFMOD. К тому же, из исходников ModPlug (на C++) можно почерпнуть массу полезной информации по трекерским форматам файлов.<p>&nbsp;<br><a name='7'><b>Благодарности</b></a><p>antarman, Barracuda, bogrus, chris_b, cresta, dododo, flaith, Four-F, GL#0M, norki, q_q, SofT MANiAC, S_T_A_S_, ts-soft, voodooattack и yoxola за помощь в устранении ошибок, предложения по улучшению библиотеки, примеры использования под разные компиляторы и всё остальное, так или иначе помогающее нам в развитии проекта.<p><a href='http://wasm.ru'>[WASM.RU]</a> и <a href='http://sf.net'>SourceForge.net</a> за поддержку и хостинг.<p>&nbsp;<br><b>Автор&#169;тво</b><p>Исходные коды uFMOD и сопровождающие утилитарные приложения &#169; 2005 - 2008 Asterix и Quantum.<br>Все права защищены.<p>Композиции:<ul><li>Minimal III &#169; 2006 - 2008 SofT MANiAC (CoolPHat).<li>BlitzXMK.XM из примера Jump2Pat &#169; 2007 - 2008 Kim (он же - norki).</ul></div><table border=0 cellpadding=0 cellspacing=0 width=100%><tr bgcolor=#708090><td height=1><tr bgcolor=#E7E7E7><td height=52 style='color:#708090;font-size:10pt;font-family:Arial,Aerial' align=center>Нашли ошибку? Желаете задать вопрос разработчикам или высказать предложение по улучшению библиотеки?<br>Разрабатываете интересный проект с использованием uFMOD? Вам сюда: <a href='mailto:ufmod@users.sf.net'>ufmod@users.sf.net</a></table></body></html>